global:
  commonAnnotations: {}
  commonLabels: {}
  loadbalancerURL: "https://example.harness.io"
  delegate:
    airgapped: false
  imagePullSecrets: []
  # image:
  #   registry: docker.io
  #   repository: harness/iacmmanager-signed
  #   pullPolicy: IfNotPresent
  #   tag: "latest"
  #   digest: ""
  #   imagePullSecrets: []
  istio:
    enabled: false
    gateway:
      create: true
      port: 443
      protocol: HTTPS
    hosts:
    - '*'
    strict: true
    tls:
      credentialName: ""
    virtualService:
      annotations: {}
      hosts:
      - ''
      gateways: []
  ingress:
    enabled: false
    objects:
      annotations: {}
    hosts:
      - 'my-host.example.org'
    tls:
      enabled: false
      secretName: harness-cert
  stackDriverLoggingEnabled: false
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  opa:
    enabled: false

# meta
nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
podLabels: {}

# image
image:
  registry: us.gcr.io
  repository: platform-205701/harness/saas-openjdk-8u242/iacm-manager
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 84000-000
  digest: ""
  imagePullSecrets: []

waitForInitContainer:
  image:
    registry: docker.io
    repository: harness/helm-init-container
    pullPolicy: IfNotPresent
    tag: "latest"
    digest: ""
    imagePullSecrets: []

# resources quotas
resources:
  requests:
    memory: 4500M
    cpu: 200m
    ephemeral-storage: 100M
  limits:
    memory: 4500M
    ephemeral-storage: 250M

# autoscaling
replicas: 1
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 8
  targetCPU: 70
  # targetMemory: 85

# updates
pdbMin: 1
maxSurge: 1
maxUnavailable: 0

# service
service:
  type: ClusterIP
  port: 7090
  grpcPort: 9979
  metricsPort: 8889

# ingress
ingress:
  enabled: false

# deployment configuration
serviceAccount:
  create: false
  annotations: {}
  name: harness-default
nodeSelector: {}
tolerations: []
affinity: {}
lifecycleHooks: {}
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# security
podSecurityContext:
  fsGroup: 65534
containerSecurityContext:
  runAsUser: 65534
  # runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true

# additional configuration
extraVolumes: []
extraVolumeMounts: []

# harness secrets
secrets:
  default:
    OPA_SERVER_SECRET: "dOkdsVqdRPPRJG31XU0qY4MPqmBBMk0PTAGIKM6O7TGqhjyxScIdJe80mwh5Yb5zF3KxYBHw6B3Lfzlq"
    VERIFICATION_SERVICE_SECRET: "67d9b94d9856665afc21acd3aa745401"
  kubernetesSecrets:
    - secretName: ""
      keys:
        OPA_SERVER_SECRET: ""
        VERIFICATION_SERVICE_SECRET: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          OPA_SERVER_SECRET:
            name: ""
            property: ""
          VERIFICATION_SERVICE_SECRET:
            name: ""
            property: ""

# redis secrets
redis:
  protocol: ""
  hosts: []
  extraArgs: ""
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          REDIS_USERNAME: ""
          REDIS_PASSWORD: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            REDIS_USERNAME:
              name: ""
              property: ""
            REDIS_PASSWORD:
              name: ""
              property: ""

# database secrets
timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""

probes:
  livenessProbe:
    httpGet:
      path: /health/liveness
      port: http
    timeoutSeconds: 2
    periodSeconds: 5
    failureThreshold: 5
  readinessProbe:
    httpGet:
      path: /health
      port: http
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 5
  startupProbe:
    httpGet:
      path: /health
      port: http
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 25

# application envs
config:
  DEPLOY_MODE: KUBERNETES_ONPREM
  #
  IACM_TERRAFORM_IMAGE: plugins/harness_terraform:latest
  IACM_TERRAFORM_VM_IMAGE: plugins/harness_terraform_vm:latest
  #
  SHOULD_CONFIGURE_WITH_PMS: true
  DEFAULT_INTERNAL_IMAGE_CONNECTOR: account.harnessImage
  #
  DEFAULT_CPU_LIMIT: 500
  DEFAULT_MEMORY_LIMIT: 1000
  #
  USE_REDIS_FOR_SDK_RESPONSE_EVENTS: true
  EVENTS_FRAMEWORK_ENV_NAMESPACE: iac
  EVENTS_FRAMEWORK_REDIS_SSL_ENABLED: false
  EVENTS_FRAMEWORK_REDIS_SSL_CA_TRUST_STORE_PATH: /opt/harness/svc/redis_labs_ca_truststore
  #
  ENABLE_DASHBOARD_TIMESCALE: true
  #
  # CIE Scalability
  scalabilityTest: false
  PLAN_CREATOR_SERVICE_EXECUTOR_POOL_CORE_SIZE: "150"
  PLAN_CREATOR_SERVICE_EXECUTOR_POOL_MAX_SIZE: "200"
  ASYNC_DELEGATE_RESPONSE_THREAD_COUNT: "15"
  #
  # Config files
  ngServiceAccount: "test"
  redislabsCATruststore:
  MONGO_INDEX_MANAGER_MODE: AUTO
  ENFORCEMENT_CHECK_ENABLED: false
  MEMORY: 2500
  PMS_SDK_ORCHESTRATION_EVENT_POOL_CORE_SIZE: 15
  USE_DMS: false
  #
  # SECURITY_IMAGE:
  #
  HOSTED_VM_SPLIT_LINUX_AMD64_POOL: false
  HOSTED_VM_SPLIT_LINUX_ARM64_POOL: false
  HOSTED_VM_SPLIT_WINDOWS_AMD64_POOL: false
  #
  ENABLE_PROMETHEUS_COLLECTOR: true

# additionalConfigs: {}

#### unused????
# # domainVersion: "v-1-0-<+regex.extract("^[0-9]+", <+artifact.tag>)>-"
# oldPathPrefix: envSpecific
# app_gen: ng
# JOB_NAME: iacmmanager
# TraceableEnabled: envSpecific
# TraceableJavaEnabled: envSpecific
# USE_CLUSTER_ISOLATION_INGRESS: envSpecific

# # Seed data for config.yaml, these will be overridden from environment yaml file,
# # consider the environment yaml file as the source of truth
# server:
#   applicationConnectors:
#     - type: https
#       port: 7090
#       keyStorePath: keystore.jks
#       keyStorePassword: password
#       trustStorePath: ${JAVA_HOME}/jre/lib/security/cacerts
#       certAlias: localhost
#       validateCerts: false
#       maxRequestHeaderSize: 100KiB
#     - type: http
#       port: 4457
#       maxRequestHeaderSize: 100KiB
#   requestLog:
#     appenders: []
#   maxThreads: 1024

stoServiceGlobalToken:
  name: harness-secrets
  key: stoAppHarnessToken

database:
  mongo:
    harness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    harnessiacm:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    pmsharness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    notifications:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""

timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""

virtualService:
  annotations: {}
