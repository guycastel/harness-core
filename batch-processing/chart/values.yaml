# Default values for batch-processing
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  commonAnnotations: {}
  commonLabels: {}
  loadbalancerURL: "https://test"
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
      # -- Enable TimescaleDB SSL
      sslEnabled: false
      # -- TimescaleDB secrets
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
    clickhouse:
      enabled: false
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              CLICKHOUSE_USERNAME: ""
              CLICKHOUSE_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                CLICKHOUSE_USERNAME:
                  name: ""
                  property: ""
                CLICKHOUSE_PASSWORD:
                  name: ""
                  property: ""
  ingress:
    enabled: false
    className: harness
    hosts:
      - my-host.example.org
    tls:
      enabled: true
      secretName: ''
  smtpCreateSecret:
    enabled: false
    SMTP_PASSWORD: ""
    SMTP_HOST: ""
    SMTP_USERNAME: ""
    SMTP_USE_SSL: "true"
    SMTP_PORT: "465"
    secrets:
      kubernetesSecrets:
        - secretName: ""
          keys:
            SMTP_USERNAME: ""
            SMTP_PASSWORD: ""
            SMTP_HOST: ""
            SMTP_PORT: ""
            SMTP_USE_SSL: ""
      secretManagement:
        externalSecretsOperator:
          - secretStore:
              name: ""
              kind: ""
            remoteKeys:
              SMTP_USERNAME:
                name: ""
                property: ""
              SMTP_PASSWORD:
                name: ""
                property: ""
              SMTP_HOST:
                name: ""
                property: ""
              SMTP_PORT:
                name: ""
                property: ""
              SMTP_USE_SSL:
                name: ""
                property: ""
  ccm:
    gcpProjectId: "placeHolder"
  # image pull secrets to use for every image
  imagePullSecrets: []
  stackDriverLoggingEnabled: false
  proxy:
    enabled: false
    host: localhost
    port: 80
    username: ""
    password: ""
    protocol: http
  awsServiceEndpointUrls:
    enabled: false
    endPointRegion: us-east-2
    stsEndPointUrl: https://sts.us-east-2.amazonaws.com
    ecsEndPointUrl: https://ecs.us-east-2.amazonaws.com
    cloudwatchEndPointUrl: https://monitoring.us-east-2.amazonaws.com
  deployMode: KUBERNETES_ONPREM
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: ""

replicaCount: 1
isolatedReplica: 0
java:
  memory: "7168"
database:
  mongo:
    harness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    events:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
image:
  registry: docker.io
  repository: harness/batch-processing-signed
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "81905-000"
  digest: ""
  # image pull secrets to use for batch-processing image
  imagePullSecrets: []
imageClickhouseEnabled:
  registry: docker.io
  repository: harness/batch-processing-signed
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "81905-000"
  digest: ""
  # image pull secrets to use for batch-processing image
  imagePullSecrets: []
imageAzureDataPipeline:
  registry: docker.io
  repository: harness/ccm-azure-smp-signed
  pullPolicy: Always
  tag: "10058"
  digest: ""
  imagePullSecrets: []
imageGCPDataPipeline:
  registry: docker.io
  repository: harness/ccm-gcp-smp-signed
  pullPolicy: Always
  tag: "10057"
  digest: ""
  imagePullSecrets: []
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
smtp:
  host: ""
  password: ""
  user: ""
ceBatchGCPCredentials: ""
ceGCPHomeProjectCreds: ""
storageObjectAdmin: ""
gcpConfig:
  GCP_SMP_ENABLED: false
  bucketNamePrefix: "harness-ccm-%s-%s"
awsSecret:
  S3_SYNC_CONFIG_ACCESSKEY: ""
  S3_SYNC_CONFIG_SECRETKEY: ""
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: false
  annotations: {}
  name: "harness-default"
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
service:
  annotations: {}
  type: ClusterIP
  port: 6340
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
cloudProviderConfig:
  DATA_PIPELINE_CONFIG_GCS_BASE_PATH: "gs://awscustomerbillingdata-onprem"
  CLUSTER_DATA_GCS_BUCKET: "clusterdata-onprem"
  CLUSTER_DATA_GCS_BACKUP_BUCKET: "clusterdata-onprem-backup"
  S3_SYNC_CONFIG_BUCKET_NAME: "ccm-service-data-bucket"
  S3_SYNC_CONFIG_REGION: "us-east-1"
azureConfig:
  AZURE_SMP_ENABLED: false
  AZURE_SMP_REPORT_RETRIES: 5
  AZURE_SMP_HISTORY_TIME_DELTA: 1
  HARNESS_CE_AZURE_CONTAINER_NAME: ""
  HARNESS_CE_AZURE_STORAGE_NAME: ""
  HARNESS_CE_AZURE_IS_SYNC_JOB_DISABLED: ""
awsAccountTagsCollectionJobConfig:
  enabled: true
clickhouse:
  sendReceiveTimeout: "86400"
  socketTimeout: "86400000"
  queryRetries: "3"
  username: "default"
  password:
    name: clickhouse
    key: admin-password
workloadIdentity:
  enabled: false
cliProxy:
  enabled: false
  host: localhost
  port: 80
  username: ""
  password: ""
  protocol: http
resources:
  limits:
    memory: "10Gi"
  requests:
    cpu: "1024m"
    memory: "10Gi"
azureCronJobResources:
  limits:
    memory: "2Gi"
  requests:
    cpu: "1"
    memory: "2Gi"
additionalConfigs: {}
java17flags: ""
# extraVolumes:
#   - name: volume-test
#     configMap:
#       name: test-config
#       # readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: volume-test
#     mountPath: /opt/harness/config
extraVolumeMounts: []
CF_CLIENT_API_KEY: "BATCH_PROCESSING_ON_PREM"
lifecycleHooks: {}
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# application level secrets
secrets:
  default:
    NEXT_GEN_MANAGER_SECRET: IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM
    CE_NG_SERVICE_SECRET: IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM
    HARNESS_CE_AZURE_CLIENTSECRET: ""
    HARNESS_CE_AZURE_SAS: ""
    HARNESS_CE_AZURE_CLIENTID: ""
    HARNESS_CE_AZURE_TENANTID: ""
    HMAC_ACCESS_KEY: ""
    HMAC_SECRET_KEY: ""
    S3_SYNC_CONFIG_ACCESSKEY: ""
    S3_SYNC_CONFIG_SECRETKEY: ""
  kubernetesSecrets:
    - secretName: ""
      keys:
        NEXT_GEN_MANAGER_SECRET: ""
        CE_NG_SERVICE_SECRET: ""
        S3_SYNC_CONFIG_ACCESSKEY: ""
        S3_SYNC_CONFIG_SECRETKEY: ""
        HARNESS_CE_AZURE_CLIENTSECRET: ""
        HARNESS_CE_AZURE_SAS: ""
        HARNESS_CE_AZURE_CLIENTID: ""
        HARNESS_CE_AZURE_TENANTID: ""
        HMAC_ACCESS_KEY: ""
        HMAC_SECRET_KEY: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          NEXT_GEN_MANAGER_SECRET:
            name: ""
            property: ""
          CE_NG_SERVICE_SECRET:
            name: ""
            property: ""
          S3_SYNC_CONFIG_ACCESSKEY:
            name: ""
            property: ""
          S3_SYNC_CONFIG_SECRETKEY:
            name: ""
            property: ""
          HARNESS_CE_AZURE_CLIENTSECRET:
            name: ""
            property: ""
          HARNESS_CE_AZURE_SAS:
            name: ""
            property: ""
          HARNESS_CE_AZURE_CLIENTID:
            name: ""
            property: ""
          HARNESS_CE_AZURE_TENANTID:
            name: ""
            property: ""
          HMAC_ACCESS_KEY:
            name: ""
            property: ""
          HMAC_SECRET_KEY:
            name: ""
            property: ""
config:
  MONGO_INDEX_MANAGER_MODE: AUTO
  EVEMTS_MONGO_INDEX_MANAGER_MODE: AUTO
  SEGMENT_ENABLED: "false"
  ANOMALY_DETECTION_USE_PROPHET: "true"
  BANZAI_CONFIG_PORT: "8082"
  METRICS_COLLECTION_DISABLED: "true"
  CONNECTOR_HEALTH_UPDATE_CRON: 0 0 10,22 * * ?
  DELEGATE_HEALTH_UPDATE_CRON: 0 0 10,22 * * ?
  GCP_USE_NEW_PIPELINE: "true"
  AWS_USE_NEW_PIPELINE: "true"
  GCP_SYNC_ENABLED: "true"
  CONNECTOR_HEALTH_UPDATE_JOB_ENABLED: "true"
  DELEGATE_HEALTH_UPDATE_JOB_ENABLED: "true"
  GCP_BQ_UPDATE_BATCH_ENABLED: "false"
