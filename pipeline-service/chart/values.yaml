# Default values for pipeline-service
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  monitoring:
    enabled: false
    port: 8889
    managedPlatform: ""
    path: /metrics
  kubeVersion: ""
  commonAnnotations: {}
  commonLabels: {}
  loadbalancerURL: ""
  stackDriverLoggingEnabled: false
  disableFreezeNotifyTemplate: true
  ssca:
    enabled: false
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      sslEnabled: false
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      certName: ""
      certKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              TIMESCALEDB_USERNAME: ""
              TIMESCALEDB_PASSWORD: ""
              TIMESCALEDB_SSL_ROOT_CERT: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                TIMESCALEDB_USERNAME:
                  name: ""
                  property: ""
                TIMESCALEDB_PASSWORD:
                  name: ""
                  property: ""
                TIMESCALEDB_SSL_ROOT_CERT:
                  name: ""
                  property: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  imagePullSecrets: []
  ingress:
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: {}
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  opa:
    enabled: false
redis:
  protocol: ""
  hosts: []
  extraArgs: ""
  events: {}
  cache: {}
  lock: {}
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          REDIS_USERNAME: ""
          REDIS_PASSWORD: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            REDIS_USERNAME:
              name: ""
              property: ""
            REDIS_PASSWORD:
              name: ""
              property: ""
timescaledb:
  # -- TimescaleDB host names
  hosts: []
  # -- Enable TimescaleDB SSL
  # sslEnabled: false
  # -- TimescaleDB secrets
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          TIMESCALEDB_USERNAME: ""
          TIMESCALEDB_PASSWORD: ""
          TIMESCALEDB_SSL_ROOT_CERT: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            TIMESCALEDB_USERNAME:
              name: ""
              property: ""
            TIMESCALEDB_PASSWORD:
              name: ""
              property: ""
            TIMESCALEDB_SSL_ROOT_CERT:
              name: ""
              property: ""
database:
  mongo:
    pmsharness:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    notifications:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
replicaCount: 1
maxSurge: 1
maxUnavailable: 0
allowedOrigins: ""
image:
  registry: docker.io
  digest: ""
  repository: harness/pipeline-service-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.41.3"
  imagePullSecrets: []
waitForInitContainer:
  image:
    registry: docker.io
    repository: harness/helm-init-container
    pullPolicy: IfNotPresent
    tag: "latest"
    digest: ""
    imagePullSecrets: []
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
timescaleSecret:
  password:
    name: harness-secrets
    key: timescaledbPostgresPassword
appLogLevel: INFO
java:
  memory: "4096m"
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true
probes:
  readinessProbe:
    httpGet:
      path: /api/health
      port: http-pms
    timeoutSeconds: 2
    periodSeconds: 5
    failureThreshold: 5
  livenessProbe:
    httpGet:
      path: /api/health
      port: http-pms
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 5
  startupProbe:
    httpGet:
      path: /api/health
      port: http-pms
    timeoutSeconds: 2
    periodSeconds: 10
    failureThreshold: 25
service:
  annotations: {}
  type: ClusterIP
  protocol: TCP
  port: 12001
  grpcport: 12011
  gitsyncgrpcport: 14002
resources:
  limits:
    memory: 6144Mi
  requests:
    cpu: 1
    memory: 6144Mi
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
imagePullSecrets: {}
additionalConfigs: {}
java17flags: ""
# extraVolumes:
# - name: volume-test
#   configMap:
#     name: test-config
#     readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: test-volume-mount
#     mountPath: /opt/harness/config
extraVolumeMounts: []
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# extraEnvVars:
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
extraEnvVars: []
virtualService:
  annotations: {}
ingress:
  annotations: {}
ssca_images:
  ssca_plugin:
    image:
      registry: docker.io
      digest: ""
      tag: "0.12.2"
      repository: harness/ssca-plugin
      imagePullSecrets: []
  slsa_plugin:
    image:
      registry: docker.io
      digest: ""
      tag: "0.12.0"
      repository: harness/slsa-plugin
      imagePullSecrets: []
secrets:
  default:
    OPA_SERVER_SECRET: "dOkdsVqdRPPRJG31XU0qY4MPqmBBMk0PTAGIKM6O7TGqhjyxScIdJe80mwh5Yb5zF3KxYBHw6B3Lfzlq"
  kubernetesSecrets:
    - secretName: ""
      keys:
        OPA_SERVER_SECRET: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          OPA_SERVER_SECRET:
            name: ""
            property: ""
config:
  CACHE_BACKEND: REDIS
  CACHE_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  DEPLOY_MODE: KUBERNETES_ONPREM
  LOCK_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  MANAGER_TARGET: harness-manager:9879
  MANAGER_AUTHORITY: harness-manager:9879
  GRPC_SERVER_PORT: "12011"
  NG_MANAGER_TARGET: ng-manager:9979
  NG_MANAGER_AUTHORITY: ng-manager:9979
  NG_MANAGER_GITSYNC_TARGET: ng-manager:13002
  NG_MANAGER_GITSYNC_AUTHORITY: ng-manager:13002
  CI_MANAGER_TARGET: ci-manager:9979
  CI_MANAGER_AUTHORITY: ci-manager:9979
  SCM_SERVICE_URI: scm-service:8091
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: harness-redis
  MANAGER_BASE_URL: http://harness-manager:9090/api/
  NG_MANAGER_BASE_URL: http://ng-manager:7090/
  ACCESS_CONTROL_BASE_URL: http://access-control:9006/api/
  NOTIFICATION_BASE_URL: http://platform-service:9005/api/
  TEMPLATE_SERVICE_ENDPOINT: http://template-service:15002/api/
  CI_MANAGER_BASE_URL: http://ci-manager:7090/
  MANAGER_CLIENT_BASEURL: http://harness-manager:9090/api/
  AUTH_ENABLED: "true"
  USE_REDIS_FOR_INTERRUPTS: "true"
  USE_REDIS_FOR_ORCHESTRATION_EVENTS: "true"
  USE_REDIS_FOR_SDK_RESPONSE_EVENTS: "true"
  MOCK_ACCESS_CONTROL_SERVICE: "false"
  ACCESS_CONTROL_ENABLED: "true"
  ENABLE_DASHBOARD_TIMESCALE: "true"
  SHOULD_USE_INSTANCE_CACHE: "false"
  STO_MANAGER_BASE_URL: http://sto-manager:7090/
  STO_MANAGER_AUTHORITY: sto-manager:9979
  STO_MANAGER_TARGET: sto-manager:9979
  CV_MANAGER_BASE_URL: http://cv-nextgen:6060/cv/api/
  CVNG_MANAGER_AUTHORITY: cv-nextgen:9979
  CVNG_MANAGER_TARGET: cv-nextgen:9979
  ENABLE_AUDIT: "true"
  AUDIT_SERVICE_BASE_URL: http://platform-service:9005/api/
