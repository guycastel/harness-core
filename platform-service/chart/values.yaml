# Default values for platform-service
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  opa:
    enabled: true
  commonAnnotations: {}
  commonLabels: {}
  kubeVersion: ""
  loadbalancerURL: "http://test/abc"
  imagePullSecrets: []
  stackDriverLoggingEnabled: false
  monitoring:
    enabled: false
    managedPlatform: ""
    port: 8889
    path: /metrics
  smtpCreateSecret:
    enabled: false
    SMTP_USERNAME: ""
    SMTP_PASSWORD: ""
    SMTP_HOST: ""
    SMTP_USE_SSL: "true"
    SMTP_PORT: "465"
    secrets:
      kubernetesSecrets:
        - secretName: ""
          keys:
            SMTP_USERNAME: ""
            SMTP_PASSWORD: ""
            SMTP_HOST: ""
            SMTP_PORT: ""
            SMTP_USE_SSL: ""
      secretManagement:
        externalSecretsOperator:
          - secretStore:
              name: ""
              kind: ""
            remoteKeys:
              SMTP_USERNAME:
                name: ""
                property: ""
              SMTP_PASSWORD:
                name: ""
                property: ""
              SMTP_HOST:
                name: ""
                property: ""
              SMTP_PORT:
                name: ""
                property: ""
              SMTP_USE_SSL:
                name: ""
                property: ""
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""
    mongo:
      installed: true
      protocol: mongodb
      # --  provide default values if mongo.installed is set to false
      hosts: []
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    timescaledb:
      installed: true
      protocol: "jdbc:postgresql"
      # --  provide default values if mongo.installed is set to false
      hosts:
        - timescaledb-single-chart:5432
      secretName: ""
      userKey: ""
      passwordKey: ""
      extraArgs: ""
    redis:
      installed: true
      protocol: "redis"
      # --  provide default values if redis.installed is set to false
      hosts:
        - redis:6379
      secretName: "redis-secret"
      userKey: "redis-user"
      passwordKey: "redis-password"
      extraArgs: ""
      ssl:
        enabled: false
        secret: ""
        caFileKey: ""
        trustStoreKey: ""
        trustStorePasswordKey: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              REDIS_USERNAME: ""
              REDIS_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                REDIS_USERNAME:
                  name: ""
                  property: ""
                REDIS_PASSWORD:
                  name: ""
                  property: ""
  ingress:
    # -- create ingress objects
    enabled: false
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: {}
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: ""
      imagePullSecrets: []

redis:
  protocol: ""
  hosts: []
  extraArgs: ""
  secrets:
    kubernetesSecrets:
      - secretName: ""
        keys:
          REDIS_USERNAME: ""
          REDIS_PASSWORD: ""
    secretManagement:
      externalSecretsOperator:
        - secretStore:
            name: ""
            kind: ""
          remoteKeys:
            REDIS_USERNAME:
              name: ""
              property: ""
            REDIS_PASSWORD:
              name: ""
              property: ""
database:
  mongo:
    notifications:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    audits:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
    resourcegroups:
      enabled: false
      protocol: ""
      hosts: []
      extraArgs: ""
      secrets:
        kubernetesSecrets:
          - secretName: ""
            keys:
              MONGO_USER: ""
              MONGO_PASSWORD: ""
        secretManagement:
          externalSecretsOperator:
            - secretStore:
                name: ""
                kind: ""
              remoteKeys:
                MONGO_USER:
                  name: ""
                  property: ""
                MONGO_PASSWORD:
                  name: ""
                  property: ""
replicaCount: 1
maxSurge: 1
maxUnavailable: 0
image:
  registry: docker.io
  repository: harness/platform-service-signed
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "80000"
  digest: ""
  imagePullSecrets: []
mongoSecrets:
  userName:
    name: harness-secrets
    key: mongodbUsername
  password:
    name: mongodb-replicaset-chart
    key: mongodb-root-password
appLogLevel: INFO
java:
  memory: "3072m"
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true
service:
  annotations: {}
  type: ClusterIP
  port: 9005
resources:
  limits:
    memory: 8192Mi
  requests:
    cpu: 0.5
    memory: 512Mi
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPU: ""
  targetMemory: ""
nodeSelector: {}
tolerations: []
affinity: {}
imagePullSecrets: {}
additionalConfigs: {}
java17flags: ""
errorTracking:
  enabled: false
  collectorURL: ''
# extraVolumes:
# - name: volume-test
#   configMap:
#     name: test-config
#     readOnly: true
extraVolumes: []
# extraVolumeMounts:
#   - name: test-volume-mount
#     mountPath: /opt/harness/config
extraVolumeMounts: []
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command:

# extraEnvVars:
# - name: POD_NAME
#   valueFrom:
#     fieldRef:
#       fieldPath: metadata.name
extraEnvVars: []
virtualService:
  annotations: {}
ingress:
  annotations: {}
secrets:
  default:
    ET_AGENT_TOKEN: "DUMMY"
  kubernetesSecrets:
    - secretName: ""
      keys:
        ET_AGENT_TOKEN: ""
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          ET_AGENT_TOKEN:
            name: ""
            property: ""
config:
  DEPLOY_MODE: KUBERNETES_ONPREM
  GRPC_MANAGER_TARGET: harness-manager:9879
  GRPC_MANAGER_AUTHORITY: harness-manager:9879
  ENABLE_AUDIT_SERVICE: "true"
  MOCK_ACCESS_CONTROL_SERVICE: "false"
  AUDIT_ENABLED: "true"
  ENABLE_RESOURCE_GROUP: "true"
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: harness-redis
  LOCK_CONFIG_SENTINEL_MASTER_NAME: harness-redis
  ACCESS_CONTROL_ENABLED: "true"
  DISTRIBUTED_LOCK_IMPLEMENTATION: REDIS
  MANAGER_CLIENT_BASEURL: http://harness-manager:9090/api/
  RBAC_URL: http://ng-manager:7090/
  NG_MANAGER_CLIENT_BASEURL: http://ng-manager:7090/
  PIPELINE_SERVICE_CLIENT_BASEURL: http://pipeline-service:12001/api/
  TEMPLATE_SERVICE_CLIENT_BASEURL: http://template-service:15002/api/
  TEMPLATE_SERVICE_BASE_URL: http://template-service:15002/api/

